
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Настройки соединения с сервером
	СерверРендеринга = "www.plantuml.com";
	РесурсСервера = "/plantuml/png/";
	ТаймаутСоединения = 20000;
	
	// Версия 
	Версия = "v.0.01  20-06-2024";
	
	// Демо дерево
	Дерево = РеквизитФормыВЗначение("СоставляющиеБлокСхемы");
	
	НоваяСтрокаДирекция = Дерево.Строки.Добавить();	
	НоваяСтрокаДирекция.Наименование = "Дирекция"; 
	
	НоваяСтрокаГенеральныйДиректор = НоваяСтрокаДирекция.Строки.Добавить();
	НоваяСтрокаГенеральныйДиректор.Наименование = "Генеральный директор"; 
	
	НоваяСтрокаЗаместитель = НоваяСтрокаДирекция.Строки.Добавить();
	НоваяСтрокаЗаместитель.Наименование = "Заместитель генерального директора";
		
	НоваяСтрокаЭкономическийДепартамент = НоваяСтрокаГенеральныйДиректор.Строки.Добавить();
	НоваяСтрокаЭкономическийДепартамент.Наименование = "Финансово-экономический департамент";
	
	НоваяСтрокаЛогистическийДепартамент = НоваяСтрокаГенеральныйДиректор.Строки.Добавить();
	НоваяСтрокаЛогистическийДепартамент.Наименование = "Департамент логистики"; 
		
	НоваяСтрокаБухгалтерия = НоваяСтрокаЭкономическийДепартамент.Строки.Добавить();
	НоваяСтрокаБухгалтерия.Наименование = "Бухгалтерия"; 
	
	НоваяСтрокаУчет = НоваяСтрокаБухгалтерия.Строки.Добавить();
	НоваяСтрокаУчет.Наименование = "Фин. и упр. учет";
	
	НоваяСтрокаЮристы = НоваяСтрокаУчет.Строки.Добавить();
	НоваяСтрокаЮристы.Наименование = "Юристы";
	
	НоваяСтрокаОтделЛогистики = НоваяСтрокаЛогистическийДепартамент.Строки.Добавить();
	НоваяСтрокаОтделЛогистики.Наименование = "Отдел логистики";
	
	НоваяСтрокаОтделЗакупок = НоваяСтрокаОтделЛогистики.Строки.Добавить();
	НоваяСтрокаОтделЗакупок.Наименование = "Отдел закупок";	
	
	НоваяСтрокаСклад = НоваяСтрокаОтделЗакупок.Строки.Добавить();
	НоваяСтрокаСклад.Наименование = "Склад";
		
	НоваяСтрокаПроизводственныйДепартамент = НоваяСтрокаЗаместитель.Строки.Добавить();
	НоваяСтрокаПроизводственныйДепартамент.Наименование = "Производственный департамент";
	
	НоваяСтрокаШвейныйЦех = НоваяСтрокаПроизводственныйДепартамент.Строки.Добавить();
	НоваяСтрокаШвейныйЦех.Наименование = "Швейный цех";
	
	НоваяСтрокаЦех = НоваяСтрокаШвейныйЦех.Строки.Добавить();
	НоваяСтрокаЦех.Наименование = "Цех металообработки";
	
	НоваяСтрокаКоммерческийДепартамент = НоваяСтрокаЗаместитель.Строки.Добавить();
	НоваяСтрокаКоммерческийДепартамент.Наименование = "Коммерческий департамент";
	
	НоваяСтрокаПродажи = НоваяСтрокаКоммерческийДепартамент.Строки.Добавить();
	НоваяСтрокаПродажи.Наименование = "Отдел продаж и работы с клиентами";
	
	НоваяСтрокаЗаказы = НоваяСтрокаПродажи.Строки.Добавить();
	НоваяСтрокаЗаказы.Наименование = "Отдел по работе с заказами";
	
	НоваяСтрокаОснащение = НоваяСтрокаЗаказы.Строки.Добавить();
	НоваяСтрокаОснащение.Наименование = "Отдел оснащения";
		
	ЗначениеВРеквизитФормы(Дерево, "СоставляющиеБлокСхемы");
	
	
	Элементы.СоставляющиеБлокСхемы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)

	СформироватьНаСервере();

КонецПроцедуры 

Процедура СформироватьНаСервере()

	СхемаPlantUML = СформироватьPlantUML();
	СгенерироватьНаСервере(СхемаPlantUML);

КонецПроцедуры

&НаСервере
Процедура СгенерироватьНаСервере(СхемаPlantUML)
	
	Результат = СгенерированноеИзображение(СхемаPlantUML, СерверРендеринга, РесурсСервера, ТаймаутСоединения);
	Если ЗначениеЗаполнено(Результат.АдресИзображения) Тогда
		РезультатОбработки = Результат.АдресИзображения; 
		// Меняет масштаб картинки на пропорциональный при формировании
		Элементы.РезультатОбработки.РазмерКартинки = РазмерКартинки.Пропорционально;
	КонецЕсли; 
	
КонецПроцедуры  

&НаСервере
Функция СгенерированноеИзображение(Данные, пСерверРендеринга, пРесурсСервера, пТаймаутСоединения)
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Данные);	
	СжатыеДанные = СжатыеДанные(ДвоичныеДанныеСтроки);	
	Base64Строка = Base64Строка(СжатыеДанные);     
	ФорматPlantUML = ФорматPlantUML(Base64Строка);  
	Соединение = Новый HTTPСоединение(пСерверРендеринга, , , , , пТаймаутСоединения);
	ТекстЗапроса = пРесурсСервера + ФорматPlantUML;
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = Соединение.Получить(Запрос);
	// ответ  не анализируется, дописать его анализ
	ДвоичныеДанныеКартинки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Результат = Новый Структура;
	Результат.Вставить("ОтветСервера", Ответ);
	Результат.Вставить("АдресИзображения", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки));
	Возврат Результат;
	
КонецФункции 

Функция СжатыеДанные(Данные) 
	
	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));
	
	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	CRC32 = ЧтениеДанных.ПрочитатьЦелое32();
	
	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	РазмерИсходныхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	
	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);
	
	ПотокGZip = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	
	Возврат ПотокGZip.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции 

Функция ФорматPlantUML(Данные)
	Результат = "";
	СтрокаИскомая	  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	СтрокаПодстановки = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"; 
	Для Счетчик = 0 По СтрДлина(Данные) - 1 Цикл     
		ТекСимвол = Сред(Данные, счетчик + 1, 1);
		Поз = СтрНайти(СтрокаИскомая, ТекСимвол); 
		Если ТекСимвол = Символы.ПС ИЛИ ТекСимвол = Символы.ВК Тогда
			Продолжить;
		КонецЕсли;
		Если Поз > 0  Тогда
			Результат = Результат + Сред(СтрокаПодстановки, Поз, 1);
		Иначе
			Результат = Результат + ТекСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьZip(Данные)
	
	#Если МобильноеПриложениеСервер Тогда
		ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
	#Иначе
		ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
		Данные.Записать(ВременныйФайл);
		ПотокZip = Новый ПотокВПамяти;
		ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
		ЗаписьZip.Добавить(ВременныйФайл);
		ЗаписьZip.Записать();
		УдалитьФайлы(ВременныйФайл);
		
		Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
	#КонецЕсли
	
КонецФункции     
   
&НаСервере
Функция СформироватьPlantUML()
	
	Дерево = РеквизитФормыВЗначение("СоставляющиеБлокСхемы");

	//Инициализировать ТЗОбозначений
	КС = Новый КвалификаторыСтроки(0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, ,КС);
	Массив.Очистить();
	
	ТЗОбозначений = Новый ТаблицаЗначений;
	ТЗОбозначений.Колонки.Добавить("Наименование", ОписаниеТиповС);
	ТЗОбозначений.Колонки.Добавить("Обозначение",  ОписаниеТиповС);

	ИндексОбозначений = 0;
	Глубина = 1;
	
	// Инициализируем схему
	Схема = "";
	Схема = Схема + "@startwbs" + Символы.ПС;	
	Схема = Схема + Символы.ПС;

	// Верхний комментарий
	Схема = Схема + "'Создано обработкой 1c_TreeSchem, " + ТекущаяДатаСеанса() + Символы.ПС;
	Схема = Схема + "'Created by processing 1c_TreeSchem, " + ТекущаяДатаСеанса() + Символы.ПС;
	Схема = Схема + "'" + Версия + Символы.ПС;
	Схема = Схема + "'GitHub: github.com/DmNep/1cTreeSchem" + Символы.ПС;
	Схема = Схема + Символы.ПС;
	
	// Задаем заголовок 
	Схема = Схема + "title " + ?(ЗначениеЗаполнено(ЗаголовокСхемы), ЗаголовокСхемы + Символы.ПС, "Схема" + Символы.ПС);
	Схема = Схема + Символы.ПС;

	// Формируем дерево	
	Схема = ОбойтиРекурсивноСтрокиДерев(Дерево.Строки, Схема, ТЗОбозначений, Глубина, ИндексОбозначений); 
	Схема = Схема + Символы.ПС;
	
	// Формируем связи
	
	
	
	// Вставить нижний колонтитул
	Схема = Схема + "footer 1c_TreeSchem" + Символы.ПС;	
	Схема = Схема + Символы.ПС;
	
	// Завершаем схему
	Схема = Схема + "@endwbs";	
	
	Возврат Схема;
	
КонецФункции
   
&НаСервере
Функция ОбойтиРекурсивноСтрокиДерев(Строки, Схема, ТЗОбозначений, Глубина, ИндексОбозначений)

	Для Каждого СтрокаДерева Из Строки Цикл
		
		// Расчитываем глубину
		Звезды = "";
		Счетчик = Глубина;
		Пока Счетчик > 0 Цикл 
			Звезды = Звезды + "*";
			Счетчик	= Счетчик - 1;
		КонецЦикла;
		
		// Отрисовываем элемент
		Схема = Схема + Звезды + "(d" + ИндексОбозначений + ") " + СтрокаДерева.Наименование + Символы.ПС;
		
		// Добавляем обозначение в ТЗ
		НовоеОбозначение = ТЗОбозначений.Добавить();
		НовоеОбозначение.Наименование = СтрокаДерева.Наименование;
		НовоеОбозначение.Обозначение  = "d" + ИндексОбозначений;
		ИндексОбозначений = ИндексОбозначений + 1;
		
		// Определяем подчинённые
        ПодчиненныеСтроки  = СтрокаДерева.Строки;
     	Если ПодчиненныеСтроки.Количество() > 0 Тогда
			Глубина = Глубина + 1;
			// Выполняем рекурсивыный вызов
        	Схема = ОбойтиРекурсивноСтрокиДерев(ПодчиненныеСтроки, Схема, ТЗОбозначений, Глубина, ИндексОбозначений);
			Глубина = Глубина - 1;
        КонецЕсли;
	КонецЦикла;
	
	Возврат Схема;
	
КонецФункции
